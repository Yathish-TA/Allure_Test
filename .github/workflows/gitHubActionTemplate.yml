# This is a sample template for Java CI with Maven, which includes:
# - Triggering the workflow on push to certain branches
# - Running the workflow on pull requests
# - Scheduling periodic builds
# - Manually triggering the workflow via workflow_dispatch
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: Java CI with Maven Template(GitHubWorkFlow)

on:
  # Trigger the workflow on push events
  push:
    branches:
      - main  # Trigger the workflow when changes are pushed to the 'main' branch
      - develop  # You can add any other branches you need to trigger on here

  # Trigger the workflow on pull request events
#  pull_request:
#    branches:
#      - main  # Trigger the workflow when a pull request is opened/updated for the 'main' branch

  # Trigger the workflow on a schedule (cron syntax)
  schedule:
    # Run the workflow at 5 AM UTC every Sunday
    - cron: '0 5 * * 0'  # This is the cron expression for every Sunday at 5 AM UTC
    # You can modify the cron expression to suit your timing requirements.
    # Example for 6 PM UTC every day: '0 18 * * *'
    # Example for 2 AM UTC daily: '0 2 * * *'

  # Trigger the workflow manually using the workflow_dispatch event
  workflow_dispatch:
    inputs:
      customBuildName:
        description: 'Provide your custom build name for Manual Trigger'
        required: true
        default: 'Manual_Run'
#      QTest_Status_Update:
#        description: 'Do you want to update the status to QTest?'
#        required: true
#        default: 'No'
#        type: choice
#        options:
#          - 'Yes'
#          - 'No'
#      QTest_Project_Name:
#        description: 'Select the project name (only if Status_Update is Yes)'
#        required: false
#        default: "Sample Project"
#        type: choice
#        options:
#          - "Sample Project"
#          - "HRIS"
#          - "Integration"
#          - "Logistics"
#          - "Omnichannel"
#          - "POS"
#          - "SAP"
#      QTest_TestSuite_ID_and_Name:
#        description: 'Enter the TestSuite ID and Name (only if Status_Update is Yes)'
#        required: false
#        type: string

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

#      - name: 'BrowserStack Env Setup'
#        uses: 'browserstack/github-actions/setup-env@master'
#        with:
#          username: ${{ secrets.BROWSERSTACK_USERNAME }}
#          access-key: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
#
#      - name: "BrowserStack Local Tunnel Setup"
#        uses: browserstack/github-actions/setup-local@master
#        with:
#          local-testing: "start"
#          local-logging-level: "all-logs"
#          local-identifier: "random"

#      - name: Set Workflow Build Name on BrowserStack
#        run: echo "BROWSERSTACK_BUILD_NAME=OnePlatform_JAVA-${{ inputs.customBuildName }}-$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      # Update suiteXmlFile, appUnderTest, ConfigFile, Tags etc as per your requirements
      - name: Build with Maven
        run: mvn test -DsuiteXmlFile="src/test/java/web/resources/testrunner/Single_Browser_Parallel.xml" -DappUnderTest="demo.web.url" -Dcucumber.filter.tags="@Demo" -q -B
#        env:
#          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
#          AZURE_KEY_VAULT_NAME: ${{ secrets.AZURE_KEY_VAULT_NAME }}

#      - name: Upload Test Report
#        uses: actions/upload-artifact@v4
#        with:
#            name: Allure-test-report
#            path: |
#              allure-report/index.html
#            if-no-files-found: warn
#            overwrite: true
#        if: always()


      - name: Load test report history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: build/allure-results

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history
